{"version":3,"sources":["../src/index.js"],"names":["dbConfig","env","process","authUrl","configApproved","hasOwnProperty","MONGO_USER","MONGO_PASSWORD","MONGO_PATH","MONGO_HOST","console","log","MONGO_PORT","MONGO_DB","exit","connectionUrl","mongoose","connect","useNewUrlParser","then","$","set","DEBUG","catch","err","e","message"],"mappings":";;;;;;AAAA;;AACA;;;;;;kBAEe,YAAM;AACjB,QAAG;AACC,YAAIA,WAAW,EAAf;AACA,YAAIC,MAAMC,QAAQD,GAAlB;AACA,YAAIE,UAAU,IAAd;AACA,YAAIC,iBAAiB,IAArB;;AAEA;;AAEA,YAAGH,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIK,UAA7C,EACIN,SAAS,YAAT,IAAyBC,IAAIK,UAA7B;;AAEJ,YAAGL,IAAII,cAAJ,CAAmB,gBAAnB,KAAwC,CAAC,CAACJ,IAAIM,cAAjD,EACIP,SAAS,gBAAT,IAA6BC,IAAIM,cAAjC;;AAEJ,YAAGN,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIO,UAA7C,EAAwD;AACpDR,qBAAS,YAAT,IAAyBC,IAAIO,UAA7B;AACH,SAFD,MAGI;AACA,gBAAGP,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIQ,UAA7C,EACIT,SAAS,YAAT,IAAyBC,IAAIQ,UAA7B,CADJ,KAEK;AACDL,iCAAiB,KAAjB;AACAM,wBAAQC,GAAR,CAAY,kEAAZ;AACH;;AAED,gBAAGV,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIW,UAA7C,EACIZ,SAAS,YAAT,IAAyBC,IAAIW,UAA7B,CADJ,KAEK;AACDR,iCAAiB,KAAjB;AACAM,wBAAQC,GAAR,CAAY,kEAAZ;AACH;AACJ;;AAED,YAAGV,IAAII,cAAJ,CAAmB,UAAnB,KAAkC,CAAC,CAACJ,IAAIY,QAA3C,EACIb,SAAS,UAAT,IAAuBC,IAAIY,QAA3B,CADJ,KAEK;AACDT,6BAAiB,KAAjB;AACAM,oBAAQC,GAAR,CAAY,+DAAZ;AACH;;AAED,YAAIX,SAASK,cAAT,CAAwB,YAAxB,KAAyC,CAAC,CAACJ,IAAIK,UAAhD,IACCN,SAASK,cAAT,CAAwB,gBAAxB,KAA6C,CAAC,CAACJ,IAAIM,cADvD,EAEGJ,UAAaH,SAASM,UAAtB,SAAoCN,SAASO,cAA7C;;AAEH,YAAG,CAACH,cAAJ,EAAmB;AACfM,oBAAQC,GAAR,CAAY,mFAAZ;AACAT,oBAAQY,IAAR,CAAa,CAAC,CAAd;AACH,SAHD,MAIK;AACD,gBAAI;AACA,oBAAGd,SAASK,cAAT,CAAwB,YAAxB,CAAH,EACI,IAAIU,qBAAmBf,SAAS,YAAT,CAAvB,CADJ,KAGI,IAAIe,gBAAmBf,SAAS,YAAT,CAAnB,SAA6CA,SAAS,YAAT,CAA7C,SAAuEA,SAAS,UAAT,CAA3E;;AAEJ,oBAAGG,OAAH,EAAYY,qBAAoBZ,OAApB,GAA8BY,aAA9B;;AAEZC,mCAASC,OAAT,gBAA8BF,aAA9B,EAA+C,EAACG,iBAAiB,IAAlB,EAA/C,EAAwEC,IAAxE,CAA6E,eAAO;AAChFC,6BAAEC,GAAF,CAAM,UAAN,EAAkBL,kBAAlB;;AAEA,wBAAGd,QAAQD,GAAR,CAAYqB,KAAZ,IAAqB,MAAxB,EACIZ,QAAQC,GAAR;AACP,iBALD,EAKGY,KALH,CAKS,eAAO;AACZb,4BAAQC,GAAR,qBAA8Ba,GAA9B;AACH,iBAPD;AAQH,aAhBD,CAiBA,OAAOC,CAAP,EAAU;AACNf,wBAAQC,GAAR,qBAA8Bc,EAAEC,OAAhC;AACH;AACJ;AACJ,KAtED,CAuEA,OAAOD,CAAP,EAAU;AACNf,gBAAQC,GAAR,qBAA8Bc,EAAEC,OAAhC;AACH;AACJ,C","file":"index.js","sourcesContent":["import { $ } from \"@dekproject/scope\";\nimport mongoose from 'mongoose';\n\nexport default () => {\n    try{\n        let dbConfig = {};\n        let env = process.env;\n        let authUrl = null;\n        let configApproved = true;\n\n        // Check the existence of the parameters below in .env\n\n        if(env.hasOwnProperty('MONGO_USER') || !!env.MONGO_USER)\n            dbConfig['MONGO_USER'] = env.MONGO_USER\n\n        if(env.hasOwnProperty('MONGO_PASSWORD') || !!env.MONGO_PASSWORD)\n            dbConfig['MONGO_PASSWORD'] = env.MONGO_PASSWORD\n\n        if(env.hasOwnProperty('MONGO_PATH') || !!env.MONGO_PATH){\n            dbConfig['MONGO_PATH'] = env.MONGO_PATH\n        }\n        else{\n            if(env.hasOwnProperty('MONGO_HOST') && !!env.MONGO_HOST)\n                dbConfig['MONGO_HOST'] = env.MONGO_HOST\n            else {\n                configApproved = false\n                console.log('[ Mongoose ] - There is no MONGO_HOST variable in the .env file.')\n            }\n\n            if(env.hasOwnProperty('MONGO_PORT') && !!env.MONGO_PORT)\n                dbConfig['MONGO_PORT'] = env.MONGO_PORT\n            else {\n                configApproved = false\n                console.log('[ Mongoose ] - There is no MONGO_PORT variable in the .env file.')\n            }\n        }\n\n        if(env.hasOwnProperty('MONGO_DB') && !!env.MONGO_DB)\n            dbConfig['MONGO_DB'] = env.MONGO_DB\n        else {\n            configApproved = false\n            console.log('[ Mongoose ] - There is no MONGO_DB variable in the .env file')\n        }\n\n        if((dbConfig.hasOwnProperty('MONGO_USER') && !!env.MONGO_USER) &&\n           (dbConfig.hasOwnProperty('MONGO_PASSWORD') && !!env.MONGO_PASSWORD))\n           authUrl = `${dbConfig.MONGO_USER}:${dbConfig.MONGO_PASSWORD}@`\n\n        if(!configApproved){\n            console.log('[ Mongoose ] - Please correct the above errors before restarting the application.')\n            process.exit(-1);\n        }\n        else {\n            try {\n                if(dbConfig.hasOwnProperty('MONGO_PATH'))\n                    var connectionUrl = `${dbConfig['MONGO_PATH']}`\n                else\n                    var connectionUrl = `${dbConfig['MONGO_HOST']}:${dbConfig['MONGO_PORT']}/${dbConfig['MONGO_DB']}`;\n\n                if(authUrl) connectionUrl =  `${authUrl}${connectionUrl}`;\n\n                mongoose.connect(`mongodb://${connectionUrl}`, {useNewUrlParser: true}).then(res => {\n                    $.set(\"mongoose\", mongoose);\n\n                    if(process.env.DEBUG == 'true')\n                        console.log(`[ Mongoose ] - MongoDB successfully signed`);\n                }).catch(err => {\n                    console.log(`[ Mongoose ] - ${err}`);\n                });\n            }\n            catch (e) {\n                console.log(`[ Mongoose ] - ${e.message}`);\n            }\n        }\n    }\n    catch (e) {\n        console.log(`[ Mongoose ] - ${e.message}`);\n    }\n}\n"]}